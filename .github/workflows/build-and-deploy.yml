name: Build and Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-push-docker-image:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          platforms: linux/arm64/v8
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/docker-vps-deploy:latest, ${{ secrets.DOCKERHUB_USERNAME }}/docker-vps-deploy:${{ github.sha }}

  deploy:
    needs: build-and-push-docker-image
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm install

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

      - name: Add host to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Create Docker context
        run: |
          docker context create vps-context --docker "host=ssh://${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }}"
          docker context use vps-context

      - name: Deploy to VPS with docker compose
        run: |
          # Create .env file with all required variables
          cat > .env << EOF
          # Database secrets (from GitHub secrets)
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_URL=${{ secrets.DB_URL }}

          # Configuration variables (from GitHub vars)
          DB_PORT=${{ vars.DB_PORT }}
          DB_NAME=${{ vars.DB_NAME }}
          NODE_ENV=${{ vars.NODE_ENV }}

          DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
          IMAGE_TAG=${{ github.sha }}
          EOF

          # Print the contents of .env file
          echo "Contents of .env file:"
          cat .env

          # Deploy using Docker Compose with the remote context
          docker compose --env-file .env up -d

          # Clean up
          docker system prune -af --force

      - name: Run database migrations
        run: |
          # Get the Docker container's IP address
          echo "Getting database container IP..."
          DB_CONTAINER_IP=$(ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} 'docker inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}" $(docker compose ps -q db)')
          echo "Database container IP: $DB_CONTAINER_IP"

          # Create SSH tunnel with better error handling
          echo "Setting up SSH tunnel..."
          ssh -v -o StrictHostKeyChecking=no -o ExitOnForwardFailure=yes -L 5432:$DB_CONTAINER_IP:5432 ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} -N &
          TUNNEL_PID=$!

          # Wait for tunnel and test connection
          echo "Waiting for tunnel to be established..."
          sleep 10

          # Test database connection
          echo "Testing database connection..."
          for i in {1..5}; do
            if pg_isready -h localhost -p ${{ vars.DB_PORT }} -U postgres; then
              echo "Database connection successful!"
              break
            fi
            if [ $i -eq 5 ]; then
              echo "Failed to connect to database after 5 attempts"
              kill $TUNNEL_PID
              exit 1
            fi
            echo "Attempt $i failed, retrying in 5 seconds..."
            sleep 5
          done

          # Set DB_URL to use local tunnel
          export DB_URL="postgresql://postgres:${{ secrets.DB_PASSWORD }}@localhost:${{ vars.DB_PORT }}/${{ vars.DB_NAME }}"

          # Debug: Print config location and connection info (without password)
          echo "Config file location: $(pwd)/drizzle.config.ts"
          echo "DB_URL (sanitized): $(echo $DB_URL | sed 's/:[^:@]*@/:\\*\\*\\*@/')"

          # Debug: Check if schema file exists
          echo "Schema file exists: $(test -f src/db/schema.ts && echo 'Yes' || echo 'No')"
          echo "Schema file content:"
          cat src/db/schema.ts

          # Push schema changes with verbose logging
          DEBUG=drizzle:* npx drizzle-kit push --verbose

          # Clean up SSH tunnel
          echo "Cleaning up SSH tunnel..."
          kill $TUNNEL_PID || true
          wait $TUNNEL_PID 2>/dev/null || true
